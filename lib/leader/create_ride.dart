import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_scc_app/leader/ride_leader.dart';

class CreateRide extends StatefulWidget {
  final FirebaseUser user;
  CreateRide({Key key, @required this.user}) : super(key: key);

  @override
  _CreateRide createState() => new _CreateRide(this.user);
}

class _CreateRide extends State<CreateRide> {
  final formController = TextEditingController();
  final FirebaseUser user;

  _CreateRide(this.user) {
    formController.text = "${this.user.displayName} - ${DateTime.now()}";
  }

  @override
  Widget build(BuildContext context) {
    return new Scaffold(
      appBar: new AppBar(
        title: new Text("Create a new Ride"),
      ),
      body: buildCreationForm(context),
    );
  }

  Widget buildCreationForm(BuildContext context) {
    return Center(
      child: Column(
        children: <Widget>[
          TextField(controller: formController),
          FlatButton(onPressed: () {
            submitRide(context);
          }, child: Text("Create Ride")),
        ],
      ),
    );
  }

  void submitRide(BuildContext context) {
    // Get a reference to the logged in users rideleader credentials
    // If they don't exist, the Firestore security rules should prevent this entry from being created, so we
    // don't try to actually resolve this reference for now.
    DocumentReference rideLeaderReference = Firestore.instance.collection('rideleaders').document(this.user.uid);

    // Generate a new document reference, with an autogenerated ID
    DocumentReference newRide = Firestore.instance.collection('ride').document();

    // Write the new document out
    newRide.setData({'title': formController.text, 'date': DateTime.now(), 'leader': rideLeaderReference}).then((result){
      // Get the document ID?
      Navigator.of(context).pop();
      Navigator.of(context).push(
          MaterialPageRoute(
            // TODO Ride View
            builder: (context) => RideLeaderSection(user: this.user, ride: newRide),
          )
      );
    }, onError: (e) {
      showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: new Text("Ride Creation Failed!"),
              content: new Text(e.toString()),
              actions: <Widget>[
                new FlatButton(
                  child: new Text("Cancel"),
                  onPressed: () {
                    Navigator.of(context).pop();
                    Navigator.of(context).pop();
                  },
                ),
                new FlatButton(
                  child: new Text("Try Again"),
                  onPressed: () {
                    Navigator.of(context).pop();
                    submitRide(context);
                  },
                )
              ],
            );
          });
    });
  }

  @override
  void dispose() {
    formController.dispose();
    super.dispose();
  }

}
